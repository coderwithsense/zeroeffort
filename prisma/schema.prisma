// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model WaitlistEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}

model PlaygroundPrompt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  prompt    String
  userId    String?
  createdAt DateTime @default(now())
}

model User {
  id        String     @id @default(cuid()) @map("_id")
  clerkId   String     @unique
  email     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  todoLists TodoList[] @relation("UserTodoLists")
  todos     Todo[]     @relation("UserTodos")
  Chat      Chat[]
  Reminder  Reminder[]
}

model Chat {
  id        String    @id @default(cuid()) @map("_id")
  chatId    String    @unique
  title     String
  createdAt DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[] @relation("ChatMessages")
}

enum MessageRole {
  system
  user
  assistant
}

model Message {
  id        String      @id @default(cuid()) @map("_id")
  content   String
  role      MessageRole
  createdAt DateTime    @default(now())
  chatId    String
  chat      Chat        @relation("ChatMessages", fields: [chatId], references: [id])
}

enum ReminderRepeat {
  daily
  weekly
  monthly
  yearly
}

model Reminder {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  dueDate   DateTime
  repeat    ReminderRepeat?
  repeatEnd DateTime?
  createdAt DateTime @default(now())
  completed Boolean  @default(false)
}

model Todo {
  id         String   @id @default(cuid()) @map("_id")
  title      String
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation("UserTodos", fields: [userId], references: [id])
  todoListId String   @default("default")
  todoList   TodoList @relation(fields: [todoListId], references: [id])
}

model TodoList {
  id        String   @id @default(cuid()) @map("_id")
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation("UserTodoLists", fields: [userId], references: [id])
  Todo      Todo[]
}
